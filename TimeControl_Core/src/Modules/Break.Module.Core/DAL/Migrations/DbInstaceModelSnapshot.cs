// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Break.Module.Core.DAL;

#nullable disable

namespace Break.Module.Core.DAL.Migrations
{
    [DbContext(typeof(DbInstace))]
    partial class DbInstaceModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Modules.Break.Module.Core.Entity.BrakeTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("busyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("busyId")
                        .IsUnique();

                    b.ToTable("BrakeTimes");
                });

            modelBuilder.Entity("Modules.Break.Module.Core.Entity.DateTimeWorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrakeId")
                        .HasColumnType("int");

                    b.Property<int?>("BrakeTimeStartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BrakeId");

                    b.HasIndex("BrakeTimeStartId");

                    b.ToTable("DateTimeWorkSchedules");
                });

            modelBuilder.Entity("Modules.Break.Module.Core.Entity.busyChecker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("busy")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("BusyCheckers");
                });

            modelBuilder.Entity("Modules.Break.Module.Core.Entity.BrakeTime", b =>
                {
                    b.HasOne("Modules.Break.Module.Core.Entity.busyChecker", "busyChecker")
                        .WithOne()
                        .HasForeignKey("Modules.Break.Module.Core.Entity.BrakeTime", "busyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("busyChecker");
                });

            modelBuilder.Entity("Modules.Break.Module.Core.Entity.DateTimeWorkSchedule", b =>
                {
                    b.HasOne("Modules.Break.Module.Core.Entity.BrakeTime", "BrakeTimeEnd")
                        .WithMany("BrakeEndTime")
                        .HasForeignKey("BrakeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Modules.Break.Module.Core.Entity.BrakeTime", "BrakeTimeStart")
                        .WithMany("BrakeStartTime")
                        .HasForeignKey("BrakeTimeStartId");

                    b.Navigation("BrakeTimeEnd");

                    b.Navigation("BrakeTimeStart");
                });

            modelBuilder.Entity("Modules.Break.Module.Core.Entity.BrakeTime", b =>
                {
                    b.Navigation("BrakeEndTime");

                    b.Navigation("BrakeStartTime");
                });
#pragma warning restore 612, 618
        }
    }
}
